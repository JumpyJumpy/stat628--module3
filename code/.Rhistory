install.packages(c("ggplot2", "dplyr"))
datasets::mtcars
datasets::mtcars -> mtcars
View(mtcars)
x <- c(22, 23.9, 20.9, 23.8, 25, 24, 21.7, 23.8, 22.8, 23.1, 23.1, 23.5, 23, 23)
log(25)
e^3.218876
exp(3.218876)
x
log(x)
log(25)-log(x)
((1/14) * sum(log(25)-log(x))) ^ -1
((1/14) * sum(log(25)-log(x)))
((1/14) * sum(log(25)-log(x))) ^ -1
d <- read.csv("data.csv", header = FALSE)
View(d)
diff <- d$V2 - d$V1
qqnorm(diff)
hist(diff)
hist(diff)
qqnorm(diff)
diff
wilcox.test(d$V1, d$V2, alternative = "greater")
wilcox.test(d$V1, d$V2, alternative = "less")
wilcox.test(d$V1, d$V2, alternative = "two-sided")
wilcox.test(d$V1, d$V2, alternative = "two.sided")
wilcox.test(d$V2, d$V1, alternative = "greater")
wilcox.test(d$V2, d$V1, alternative = "two.sided")
source('~/Downloads/STAT601_Pr1_NilSid.R')
ones = rep(1, 21)
ones = rep(1, 24)
oness = rep(1, 6)
zeroes = rep(0, 6)
id = diag(1, 6, 6)
View(id)
a1 = c(oness, zeroes, zeroes, zeroes)
a2 = c(zeroes, oness, zeroes, zeroes)
a3 = c(zeroes, zeroes, oness, zeroes)
a4 = c(zeroes, zeroes, zeroes, oness)
mat = cbind(ones, a1, a2, a3, a4, rbind(id, id, id, id))
View(mat)
library(Matrix, lib.loc = "/usr/lib/R/library")
rankMatrix(mat)
rankMatrix(mat)[1]
install.packages("ggmosaic")
install.packages(c("ggmosaic", "GGally"))
install.packages("ggmosaic")
data(mtcars)
force(mtcars)
library(ggplot2)
library(GGally)
colnames(mtcars)
for (col in colnames(mtcars)) {
ggplot(mtcars, aes(col)) + geom_histogram()
}
ggplot(mtcars, aes("mpg")) + geom_histogram()
View(mtcars)
ggplot(mtcars, aes(mpg)) + geom_histogram()
for (col in colnames(mtcars)) {
ggplot(mtcars, aes(col)) + geom_histogram() + ggtitle(col)
}
for (col in colnames(mtcars)) {
print(ggplot(mtcars, aes(col)) + geom_histogram() + ggtitle(col))
}
col[1]
col[1][1]
ggplot(mtcars, aes("mpg")) + geom_bar()
mtcars
library(ggplot2)
library(GGally)
data(mtcars)
View(mtcars)
mtcars$vs[mtcars$vs == 0] <- "V-Shaped"
mtcars$vs[mtcars$vs == 1] <- "Straight"
mtcars$am[mtcars$am == 0] <- "Automatic"
mtcars$am[mtcars$am == 1] <- "Manual"
ggplot(mtcars, aes(cyl)) + geom_histogram() + ggtitle("Cylinders")
ggplot(mtcars, aes(disp)) + geom_histogram() + ggtitle("Displacement")
ggplot(mtcars, aes(hp)) + geom_histogram() + ggtitle("Horsepower")
ggplot(mtcars, aes(drat)) + geom_histogram() + ggtitle("Rear Axle Ratio")
ggplot(mtcars, aes(wt)) + geom_histogram() + ggtitle("Weight")
ggplot(mtcars, aes(qsec)) + geom_histogram() + ggtitle("Quarter Mile Time")
ggplot(mtcars, aes(vs)) + geom_bar() + ggtitle("Engine")
ggplot(mtcars, aes(am)) + geom_bar() + ggtitle("Transmission")
ggplot(mtcars, aes(gear)) + geom_histogram() + ggtitle("Number of Forward Gears")
ggplot(mtcars, aes(carb)) + geom_histogram() + ggtitle("Number of Carburetors")
ggplot(mtcars, aes(mpg)) + geom_histogram() + ggtitle("Fuel Efficiency")
ggpairs(mtcars)
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) + geom_point()
ggplot(mtcars, aes(x = displacement, y = mpg, color = cyl)) + geom_point()
ggplot(mtcars, aes(x = disp, y = mpg, color = cyl)) + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) + geom_point() +
ggtitle("Fuel Efficiency Against Weight and Number of Cylinders")
ggplot(mtcars, aes(x = disp, y = mpg, color = cyl)) + geom_point() +
ggtitle("Fuel Efficiency Against Displacement and Number of Cylinders")
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) + geom_point() +
ggtitle("Fuel Efficiency Against Weight and Displacement")
lm1 <- lm(mpg ~ wt, data = mtcars)
plot(lm1)
install.packages("ggfortify")
autoplot(lm1)
library(ggfortify)
autoplot(lm1)
summary(lm1)
mtcars1 <- mtcars[-c("Fiat 128", "Toyota Corolla", "Chrysler Imperial")]
mtcars1 <- mtcars[c("Fiat 128", "Toyota Corolla", "Chrysler Imperial")]
mtcars1 <- mtcars[-c("Fiat 128", "Toyota Corolla", "Chrysler Imperial"),]
mtcars1 <- mtcars[c("Fiat 128", "Toyota Corolla", "Chrysler Imperial"),]
View(mtcars1)
mtcars1 <- mtcars[c(-"Fiat 128", -"Toyota Corolla", -"Chrysler Imperial"),]
mtcars1 <- mtcars[-c(17, 18, 20),]
View(mtcars1)
lm11 <- lm(mpg ~ wt, data = mtcars1)
autoplot(lm11)
summary(lm11)
lm2 <- lm(mpg ~ wt + cyl + disp, data = mtcars)
autoplot(lm2)
summary(lm2)
lm2 <- lm(mpg ~ wt + cyl, data = mtcars)
autoplot(lm2)
summary(lm2)
plot(lm2)
lm22 <- lm(mpg ~ wt + cyl, data = mtcars1)
autoplot(lm22)
summary(lm22)
x <- 0:136
sd(x)
library(dplyr)
library(tibble)
covid <- read.csv("COVID-19_Historical_Data_by_County.csv") %>%
mutate(DATE = as.Date(DATE)) %>% arrange(GEOID) %>%
filter(DATE == as.Date("2021-03-22")) %>%
mutate_if(is.numeric, ~ifelse(. == -999, 0, .)) %>%
select(-c(GEO, GEOID, DATE, OBJECTID)) %>% column_to_rownames(var = "NAME")
d <- read.csv("Downloads/latestdata.csv")
View(d)
data <- read.csv("Downloads/listings.csv")
str(data)
d <- read.csv("Downloads/icml_face_data.csv")
View(d)
hmm <- d[1, pixels]
hmm <- d[1, "pixels"]
len(hmm)
length(hmm)
hmm
d <- read.csv("Downloads/icml_face_data.csv")
hmm <- d[1, "pixels"]
View(hmm)
library(dplyr)
library(tibble)
library(tidyr)
x <- runif(100, 5, 15)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- runif(100, 5, 10)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- runif(100, 1, 2)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- runif(100, 1, 5)
y <- x^2 + (2 * x) + 1
plot(x, y)
1:40:5
1:0.1:5
sep(1, 5, 0.1)
seq(1, 5, 0.1)
x <- seq(1, 5, 0.1)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- seq(1, 4, 0.1)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- seq(0, 4, 0.1)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- seq(0, 1, 1)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- seq(0, 1, 0.1)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- seq(0, 1, 0.01)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- seq(1, 4, 0.1)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- seq(1, 5, 0.1)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- runif(40, 1, 5)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- runif(40, -5, 5)
y <- x^2 + (2 * x) + 1
plot(x, y)
x <- runif(40, 0, 5)
y <- x^2
plot(x, y)
x <- runif(40, -5, 5)
y <- x^2
plot(x, y)
x <- runif(101, -5, 5)
y <- x^2
plot(x, y)
x <- runif(100, -5, 5)
y <- x^2
plot(x, y)
x <- runif(100, 0, 5)
y <- x^2
plot(x, y)
x <- runif(100, 0, 5)
y <- x^2 + rnorm(100, 0, 0.1)
plot(x, y)
x <- runif(100, 0, 5)
y <- x^2 + rnorm(100, 0, 0.2)
plot(x, y)
x <- runif(500, 0, 5)
y <- x^2 + rnorm(100, 0, 0.25)
plot(x, y)
x <- runif(250, 0, 5)
y <- x^2 + rnorm(100, 0, 0.25)
plot(x, y)
x <- runif(250, 0, 5)
y <- x^2 + rnorm(250, 0, 0.25)
plot(x, y)
mod1 <- lm(y ~ x + x^2)
abline(mod1)
mod1
x <- runif(250, 0, 5)
y <- x^2 + rnorm(250, 0, 0.25)
data <- cbind(x, y)
View(data)
data <- data.frame(cbind(x, y))
plot(data$x, data$y)
mod1 <- lm(y ~ .^2, data = data)
mod1
mod1 <- lm(y ~ poly(x))
mod1
abline(mod1)
mod1 <- lm(y ~ poly(x, 2))
mod1
abline(mod1)
x <- runif(250, 0, 5)
y <- x^2 + rnorm(250, 0, 0.25)
olot(x, y)
plot(x, y)
mod1 <- lm(y ~ x + I(x^2))
mod1
mod1$coefficients
coef1 <- mod1$coefficients
xx <- seq(0, 5, 0.001)
yy <- coef1[1] + (coef[2] * xx) + (coef[3] * (xx ^ 2))
coef[1]
coef1
x <- runif(100, 0, 5)
y <- x^2 + rnorm(100, 0, 0.25)
plot(x, y)
x <- seq(0, 5, 0.1)
y <- x^2 + rnorm(51, 0, 0.25)
plot(x, y)
x <- seq(0, 5, 0.1)
y <- x^2 + rnorm(51, 0, 0.5)
plot(x, y)
x <- seq(0, 5, 0.1)
y <- x^2 + rnorm(51, 0, 0.75)
plot(x, y)
mod1 <- lm(y ~ x + I(x^2))
coef1 <- mod1$coefficients
coef1[1]
coef[1] + coef[2] + coef[3]
coef1 <- list(mod1$coefficients)
x <- seq(0, 5, 0.1)
y <- x^2 + rnorm(51, 0, 0.75)
plot(x, y)
mod1 <- lm(y ~ x + I(x^2))
coef1 <- as.numeric(mod1$coefficients)
xx <- seq(0, 5, 0.001)
yy <- coef1[1] + (coef[2] * xx) + (coef[3] * (xx ^ 2))
coef[2] * x
coef[2]
coef[1]
coef1
coef1[1]
x <- seq(0, 5, 0.1)
y <- x^2 + rnorm(51, 0, 0.75)
plot(x, y)
mod1 <- lm(y ~ x + I(x^2))
coef1 <- as.numeric(mod1$coefficients)
xx <- seq(0, 5, 0.001)
yy <- coef1[1] + (coef1[2] * xx) + (coef1[3] * (xx ^ 2))
summary(mod1)
plot(xx, yy, type = "l")
plot(x, y)
lines(xx, yy)
mod0 <- lm(y ~ x)
coef0 <- as.numeric(mod0$coefficients)
yyy <- coef0[1] + (coef0[2] * xx) + (coef0[3] * (xx ^ 2))
lines(xx, yyy)
yyy <- coef0[1] + (coef0[2] * xx)
lines(xx, yyy)
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
hospital <- read.csv("hospital.csv")
homeless <- read.csv("homeless.csv")
str(hospital)
str(homeless)
sort(unique(hospital$county))
homeless$county %>% unique %>% sort
homeless$county %>% str_remove("County") %>% str_trim %>% unique %>% sort
tribes <- c("Bishop Paiute Tribal Council", "Hoopa Valley Tribe", "Wilton Rancheria",
"Wilton Rancheria Tribe")
homeless <- homeless %>% filter(!(county %in% tribes)) %>%
mutate(county = county %>% str_remove("County") %>% str_trim, date = as.Date(date))
hospital <- hospital %>% mutate(todays_date = as.Date(todays_date))
print(paste("First Date:", min(hospital$todays_date)))
print(paste("Last Date:", max(hospital$todays_date)))
print(paste("Number of Days:", length(unique(hospital$todays_date))))
print(paste("First Date:", min(homeless$date)))
print(paste("Last Date:", max(homeless$date)))
print(paste("Number of Days:", length(unique(homeless$date))))
joined <- hospital %>%
inner_join(homeless, by = c("county", "todays_date" = "date"))
str(joined)
head(joined)
joined %>% filter(!is.na(hospitalized_covid_patients)) %>% head
head(joined)
install.packages("FITSio")
history(max.show = Inf)
savehistory("~/sss.Rhistory")
install.packages("tidyverse")
install.packages('rvest')
install.packages('rvest')
install.packages(c("test2norm", "testarguments"))
x <- 1:50
y <- 2 * x + rnorm(50, 0, 0.5)
model <- lm(Y ~ x)
model <- lm(y ~ x)
plot(model)
MSEs <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(MSEs) <- c("distance", "spectrumID", "i")
rm(list = ls())
library("FITSio")
readFrameFromFITS("cB58_Lyman_break.fit")
library(car)
library(MASS)
bodyfat <- read.csv('BodyFat.csv')
summary(bodyfat)
bodyfat$BODYFAT_DENSITY <- (495 / bodyfat$DENSITY) - 450
shiny::runApp('Code/FA2021/STAT628/Module 2/BodyFat')
data <- read.csv('BodyFat.csv')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='nvarshney2',
token='BA1A1A633995E8D0E2124421B73646DD',
secret='<SECRET>')
rsconnect::setAccountInfo(name='nvarshney2', token='BA1A1A633995E8D0E2124421B73646DD', secret='CZyIfi0bs+tKriatZByytU+RXWFvdtxIFaew4EmN')
rsconnect::deployApp('Code/FA2021/STAT628/Module 2/BodyFat')
rsconnect::deployApp('Code/FA2021/STAT628/Module 2/BodyFat')
data(mtcars)
force(mtcars)
print(min(mtcars$wt[mtcars$gear == 3]))
s1 <- c(1870, 1324, 1446, 1325, 1759, 1652, 1364, 1515, 1065)
s2 <- c(1121, 408, 184, 16, 741, 170, 991, 711, 734, 202, 893, 742, 335, 444)
y1 <- sum(s1) / 9
y2 <- sum(s2) / 14
s12 <- sum((s1 - y1)^2) / 8
s22 <- sum((s2 - y2)^2) / 13
sp2 <- ((8 * s12) + (13 * s22)) / 21
t <- (y1 - y2) / (sqrt(sp2 * ((1/9) + (1/14))))
pt(t, 21, lower.tail = FALSE)
qt(0.025, 21, lower.tail = FALSE)
pt(2.079614, 21, lower.tail = FALSE)
y1 - y2
(crit * sqrt(sp2 * ((1/9) + (1/14))))
crit <- qt(0.025, 21, lower.tail = FALSE)
(crit * sqrt(sp2 * ((1/9) + (1/14))))
(y1 - y2) - (crit * sqrt(sp2 * ((1/9) + (1/14))))
(y1 - y2) + (crit * sqrt(sp2 * ((1/9) + (1/14))))
pt(t, 21, lower.tail = FALSE) * 2
hist(s1)
hist(s2)
hist(s1, main = 'Seedlings from Healthy Buds', xlab = 'Stem Volume (cm^3)')
qqplot(s1)
qqnorm(s1)
qqline(s1)
qqnorm(s1, main = 'Normal Q-Q Plot, Seedlings from Healthy Buds')
qqline(s1)
qqnorm(s2, main = 'Normal Q-Q Plot, Seedlings from Infected Buds')
qqline(s2)
hist(s1, main = 'Seedlings from Healthy Buds', xlab = 'Stem Volume (cm^3)')
hist(s2, main = 'Seedlings from Infected Buds', xlab = 'Stem Volume (cm^3)')
qqnorm(s1, main = 'Normal Q-Q Plot, Seedlings from Healthy Buds')
qqline(s1)
qqnorm(s2, main = 'Normal Q-Q Plot, Seedlings from Infected Buds')
qqline(s2)
yuck <- '3856.tgz'
substr(yuck, 1, nchar(yuck)-4)
jobs <- 1:22
(jobs / 8) + 2019
round((jobs / 8) + 2019)
floor((jobs / 8) + 2019)
floor(((jobs - 1) / 8) + 2019)
floor(((jobs - 1) / 2) % 4)
floor(((jobs - 1) / 2) %% 4)
floor(((jobs + 1) / 2) %% 4)
floor((((jobs - 1) / 2) %% 4) + 1)
list.files('Downloads')
list.files('Downloads')[1:2]
1:-1
test <- 1:100
test[1:-1]
MSEs <- data.frame(matrix(ncol = 3, nrow = 0))
for(i in 1:10) {
MSEs[nrow(MSEs) + 1,] <- c(i, 2*i, 3*i)
}
View(MSEs)
write.csv(MSEs, paste('test1', "csv", sep = "."), row.names = FALSE)
write.csv(MSEs, paste('test1', "csv", sep = "."), row.names = FALSE)
write.csv(MSEs, paste('test2', "csv", sep = "."), row.names = FALSE, col.names = FALSE)
write.table(MSEs, paste('test3', "csv", sep = "."), row.names = FALSE, col.names = FALSE)
write.table(MSEs, paste('test3', "csv", sep = "."), row.names = FALSE, col.names = FALSE, sep = ",")
write.table(MSEs, paste('test3', "csv", sep = "."), row.names = FALSE, col.names = FALSE, sep = ",")
for(i in 1:10) {
MSEs[nrow(MSEs) + 1,] <- c(i, 'r', 3*i)
}
write.table(MSEs, paste('test3', "csv", sep = "."), row.names = FALSE, col.names = FALSE, sep = ",")
write.table(MSEs, paste('test3', "csv", sep = "."), row.names = F, col.names = F, quote = F, sep = ",")
x <- rbind(c(1, -1, 0, 0, 0, 0, 0),
c(1, 0, -1, 0, 0, 0, 0),
c(1, 0, 0, -1, 0, 0, 0),
c(1, 0, 0, 0, -1, 0, 0),
c(1, 0, 0, 0, 0, -1, 0),
c(1, 0, 0, 0, 0, 0, -1),
c(0, 1, -1, 0, 0, 0, 0),
c(0, 1, 0, -1, 0, 0, 0),
c(0, 1, 0, 0, -1, 0, 0),
c(0, 1, 0, 0, 0, -1, 0),
c(0, 1, 0, 0, 0, 0, -1),
c(0, 0, 1, -1, 0, 0, 0),
c(0, 0, 1, 0, -1, 0, 0),
c(0, 0, 1, 0, 0, -1, 0),
c(0, 0, 1, 0, 0, 0, -1),
c(0, 0, 0, 1, -1, 0, 0),
c(0, 0, 0, 1, 0, -1, 0),
c(0, 0, 0, 1, 0, 0, -1),
c(0, 0, 0, 0, 1, -1, 0),
c(0, 0, 0, 0, 1, 0, -1),
c(0, 0, 0, 0, 0, 1, -1))
games <- data.frame(rbind(x, x))
games$Home <- c(rep(1, 21), rep(-1, 21))
home_wins <- c(4, 4, 4, 6, 4, 6, 4, 4, 6, 6, 4, 2, 4, 4, 6, 4, 4, 6, 5, 6, 2)
away_wins <- c(3, 5, 3, 1, 5, 5, 3, 1, 5, 3, 5, 5, 3, 4, 6, 2, 3, 4, 2, 6, 4)
wins <- c(home_wins, away_wins)
num_hgames <- c(7, 6, 7, 7, 6, 6, 6, 7, 6, 7, 7, 6, 7, 6, 6, 7, 6, 7, 7, 6, 6)
num_agames <- c(6, 7, 6, 6, 7, 7, 7, 6, 7, 6, 6, 7, 6, 7, 7, 6, 7, 6, 6, 7, 7)
num_games <- c(num_hgames, num_agames)
binreg <- glm(wins / num_games ~ . - Home - 1, data = games,
family = binomial('logit'), weights = num_games)
binreg_ha <- glm(wins / num_games ~ . - 1, data = games,
family = binomial('logit'), weights = num_games)
binreg_ha$fitted.values
MSEs <- data.frame(matrix(ncol = 3, nrow = 0))
MSEs[nrow(MSEs) + 1,] <- c(NA, 'a', NA)
MSEs[nrow(MSEs) + 1,] <- c(3, 'b', 2)
MSEs[nrow(MSEs) + 1,] <- c(4, 'c', 3)
MSEs[nrow(MSEs) + 1,] <- c(NA, 'd', 9)
MSEs[nrow(MSEs) + 1,] <- c(1, 'e', 0)
MSEs[nrow(MSEs) + 1,] <- c(5, 'f', 7)
MSEs[MSEs$X1 != NA]
MSEs[MSEs$X1 != NA,]
MSEs[!(is.na(MSEs$X1)),]
setwd('Code/FA2021/STAT628/stat628-module3/code')
shiny::runApp('Recommendations')
runApp('Recommendations')
runApp('Recommendations')
